{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useParams}from'react-router-dom';import'./TicTacToeBoard.css';import api from'../services/api';import io from'socket.io-client';import socket from'./socket';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const TicTacToeBoard=()=>{const{sessionId}=useParams();const[board,setBoard]=useState(Array(9).fill(null));const[currentPlayer,setCurrentPlayer]=useState('X');const[winner,setWinner]=useState(null);const[isSpeaking,setIsSpeaking]=useState(false);const resetGame=()=>{socket.emit('reset game',sessionId);};useEffect(()=>{// Fetch initial game state from the API\napi.getGameState(sessionId).then(response=>{console.log('Game state from backend:',response);console.log(\"set currentState \",response.currentState);setBoard(response.currentState);setCurrentPlayer(response.currentPlayer);setWinner(response.winner);}).catch(error=>{console.error('Error fetching game state:',error);});// Establish WebSocket connection\n// Join the session\nsocket.emit('join session',sessionId);socket.on('player type',playerType=>{console.log(\"You are player \".concat(playerType));// Set state or react accordingly\n});// Handle game updates\nsocket.on('game update',updatedSessionState=>{setBoard(updatedSessionState.currentState);setCurrentPlayer(updatedSessionState.currentPlayer);setWinner(updatedSessionState.winner);});const SpeechRecognition=window.SpeechRecognition||window.webkitSpeechRecognition;const recognition=new SpeechRecognition();recognition.continuous=true;// Keep listening even after a command is recognized\nrecognition.lang='en-US';recognition.onstart=()=>{console.log('Speech recognition started');};recognition.onerror=event=>{console.error('Speech recognition error',event.error);};recognition.onend=()=>{console.log('Speech recognition ended');};recognition.onresult=event=>{const transcript=event.results[event.results.length-1][0].transcript.trim();console.log(transcript);handleVoiceCommand(transcript);};recognition.start();return()=>{recognition.stop();socket.disconnect();};},[sessionId]);// Dependency array ensures this effect runs only when sessionId changes\nconst handleCellClick=async index=>{if(board&&!board[index]&&!winner){// Emit 'make move' event to the server\nconsole.log(\"emitting make move\");socket.emit('make move',sessionId,index);}};const readCellInfo=index=>{setIsSpeaking(true);const row=Math.floor(index/3)+1;// Calculate row\nconst col=index%3+1;// Calculate column\nconst value=board[index]?board[index]:'empty';console.log(\"Row: \".concat(row,\", Column: \").concat(col,\", Value: \").concat(value));const msg=new SpeechSynthesisUtterance();msg.text=\"Row: \".concat(row,\", Column: \").concat(col,\", Value: \").concat(value);msg.onend=()=>{setIsSpeaking(false);};window.speechSynthesis.speak(msg);};const handleVoiceCommand=transcript=>{// Parse the transcript to extract row and column\nconst matches=transcript.match(/row (\\d) column (\\d)/i);if(matches){console.log(\"matched\");const row=parseInt(matches[1],10);const col=parseInt(matches[2],10);const index=(row-1)*3+(col-1);if(index>=0&&index<9){handleCellClick(index);}}};const renderCell=index=>{return/*#__PURE__*/_jsx(\"button\",{className:\"cell\",onClick:()=>handleCellClick(index),onMouseEnter:()=>!isSpeaking&&readCellInfo(index),disabled:!!winner,children:board[index]});};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"board\",children:Array.from({length:9},(_,index)=>renderCell(index))}),winner&&/*#__PURE__*/_jsxs(\"div\",{className:\"winner\",children:[\"Winner: \",winner]}),/*#__PURE__*/_jsx(\"button\",{onClick:resetGame,children:\"Start New Game\"})]});};export default TicTacToeBoard;","map":{"version":3,"names":["React","useState","useEffect","useParams","api","io","socket","jsx","_jsx","jsxs","_jsxs","TicTacToeBoard","sessionId","board","setBoard","Array","fill","currentPlayer","setCurrentPlayer","winner","setWinner","isSpeaking","setIsSpeaking","resetGame","emit","getGameState","then","response","console","log","currentState","catch","error","on","playerType","concat","updatedSessionState","SpeechRecognition","window","webkitSpeechRecognition","recognition","continuous","lang","onstart","onerror","event","onend","onresult","transcript","results","length","trim","handleVoiceCommand","start","stop","disconnect","handleCellClick","index","readCellInfo","row","Math","floor","col","value","msg","SpeechSynthesisUtterance","text","speechSynthesis","speak","matches","match","parseInt","renderCell","className","onClick","onMouseEnter","disabled","children","from","_"],"sources":["/Users/chiaangyong/Desktop/Project/aet-swe-chiaangyong/src/components/TicTacToeBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './TicTacToeBoard.css';\nimport api from '../services/api';\nimport io from 'socket.io-client';\nimport socket from './socket'; \n\nconst TicTacToeBoard = () => {\n  const { sessionId } = useParams();\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [currentPlayer, setCurrentPlayer] = useState('X');\n  const [winner, setWinner] = useState(null);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n\n  const resetGame = () => {\n    socket.emit('reset game', sessionId);\n  };\n\n\n  useEffect(() => {\n\n\n\n    // Fetch initial game state from the API\n    api.getGameState(sessionId)\n      .then(response => {\n        console.log('Game state from backend:', response);\n        console.log(\"set currentState \", response.currentState)\n        setBoard(response.currentState  );\n        setCurrentPlayer(response.currentPlayer);\n        setWinner(response.winner);\n      })\n      .catch(error => {\n        console.error('Error fetching game state:', error);\n      });\n\n\n      \n    // Establish WebSocket connection\n    \n\n    // Join the session\n    socket.emit('join session', sessionId);\n    socket.on('player type', (playerType) => {\n      console.log(`You are player ${playerType}`);\n      // Set state or react accordingly\n    });\n    // Handle game updates\n    socket.on('game update', (updatedSessionState) => {\n      setBoard(updatedSessionState.currentState);\n      setCurrentPlayer(updatedSessionState.currentPlayer);\n      setWinner(updatedSessionState.winner);\n    });\n\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.continuous = true; // Keep listening even after a command is recognized\n    recognition.lang = 'en-US';\n\n    recognition.onstart = () => {\n      console.log('Speech recognition started');\n    };\n\n    recognition.onerror = (event) => {\n      console.error('Speech recognition error', event.error);\n\n    };\n    \n    recognition.onend = () => {\n      \n      console.log('Speech recognition ended');\n    };\n\n    recognition.onresult = (event) => {\n      const transcript = event.results[event.results.length - 1][0].transcript.trim();\n      console.log(transcript);\n      handleVoiceCommand(transcript);\n    };\n\n    recognition.start();\n\n\n    return () => {\n      recognition.stop();\n      socket.disconnect();\n    };\n\n  }, [sessionId]); // Dependency array ensures this effect runs only when sessionId changes\n\n\n  \n  const handleCellClick = async (index) => {\n    if (board && !board[index] && !winner) {\n      // Emit 'make move' event to the server\n      console.log(\"emitting make move\");\n      socket.emit('make move', sessionId, index);\n    }\n  };\n\n  const readCellInfo = (index) => {\n\n    setIsSpeaking(true);\n\n    const row = Math.floor(index / 3) + 1; // Calculate row\n    const col = (index % 3) + 1;           // Calculate column\n    const value = board[index] ? board[index] : 'empty';\n\n    console.log(`Row: ${row}, Column: ${col}, Value: ${value}`);\n\n\n    const msg = new SpeechSynthesisUtterance();\n    msg.text = `Row: ${row}, Column: ${col}, Value: ${value}`;\n    msg.onend = () => {\n      setIsSpeaking(false);\n  };\n    window.speechSynthesis.speak(msg);\n\n};\n\n\nconst handleVoiceCommand = (transcript) => {\n  // Parse the transcript to extract row and column\n  const matches = transcript.match(/row (\\d) column (\\d)/i);\n  if (matches) {\n    console.log(\"matched\")\n\n    const row = parseInt(matches[1], 10);\n    const col = parseInt(matches[2], 10);\n    const index = (row - 1) * 3 + (col - 1);\n    if (index >= 0 && index < 9) {\n      handleCellClick(index);\n    }\n  }\n};\n\n  const renderCell = (index) => {\n    return (\n        <button \n            className=\"cell\" \n            onClick={() => handleCellClick(index)} \n            onMouseEnter={() => !isSpeaking && readCellInfo(index)}\n            disabled={!!winner}>\n            {board[index]}\n        </button>\n    );\n  };\n\n  return (\n    <div>\n      <div className=\"board\">\n        {Array.from({ length: 9 }, (_, index) => renderCell(index))}\n      </div>\n      {winner && <div className=\"winner\">Winner: {winner}</div>}\n\n      <button onClick={resetGame}>Start New Game</button>\n\n    </div>\n  );\n};\nexport default TicTacToeBoard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}