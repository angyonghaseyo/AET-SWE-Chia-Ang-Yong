{"ast":null,"code":"var _jsxFileName = \"/Users/chiaangyong/Desktop/Project/aet-swe-chiaangyong/src/components/TicTacToeBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './TicTacToeBoard.css';\nimport api from '../services/api';\nimport io from 'socket.io-client';\nimport socket from './socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TicTacToeBoard = () => {\n  _s();\n  const {\n    sessionId\n  } = useParams();\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [currentPlayer, setCurrentPlayer] = useState('X');\n  const [winner, setWinner] = useState(null);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const resetGame = () => {\n    socket.emit('reset game', sessionId);\n  };\n  useEffect(() => {\n    // Fetch initial game state from the API\n    api.getGameState(sessionId).then(response => {\n      console.log('Game state from backend:', response);\n      console.log(\"set currentState \", response.currentState);\n      setBoard(response.currentState);\n      setCurrentPlayer(response.currentPlayer);\n      setWinner(response.winner);\n    }).catch(error => {\n      console.error('Error fetching game state:', error);\n    });\n\n    // Establish WebSocket connection\n\n    // Join the session\n    socket.emit('join session', sessionId);\n    socket.on('player type', playerType => {\n      console.log(`You are player ${playerType}`);\n      // Set state or react accordingly\n    });\n    // Handle game updates\n    socket.on('game update', updatedSessionState => {\n      setBoard(updatedSessionState.currentState);\n      setCurrentPlayer(updatedSessionState.currentPlayer);\n      setWinner(updatedSessionState.winner);\n    });\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.continuous = true; // Keep listening even after a command is recognized\n    recognition.lang = 'en-US';\n    recognition.onstart = () => {\n      console.log('Speech recognition started');\n    };\n    recognition.onerror = event => {\n      console.error('Speech recognition error', event.error);\n    };\n    recognition.onend = () => {\n      console.log('Speech recognition ended');\n    };\n    recognition.onresult = event => {\n      const transcript = event.results[event.results.length - 1][0].transcript.trim();\n      console.log(transcript);\n      handleVoiceCommand(transcript);\n    };\n    recognition.start();\n    return () => {\n      recognition.stop();\n      socket.disconnect();\n    };\n  }, [sessionId]); // Dependency array ensures this effect runs only when sessionId changes\n\n  const handleCellClick = async index => {\n    if (board && !board[index] && !winner) {\n      // Emit 'make move' event to the server\n      console.log(\"emitting make move\");\n      socket.emit('make move', sessionId, index);\n    }\n  };\n  const readCellInfo = index => {\n    setIsSpeaking(true);\n    const row = Math.floor(index / 3) + 1; // Calculate row\n    const col = index % 3 + 1; // Calculate column\n    const value = board[index] ? board[index] : 'empty';\n    console.log(`Row: ${row}, Column: ${col}, Value: ${value}`);\n    const msg = new SpeechSynthesisUtterance();\n    msg.text = `Row: ${row}, Column: ${col}, Value: ${value}`;\n    msg.onend = () => {\n      setIsSpeaking(false);\n    };\n    window.speechSynthesis.speak(msg);\n  };\n  const handleVoiceCommand = transcript => {\n    // Parse the transcript to extract row and column\n    const matches = transcript.match(/row (\\d) column (\\d)/i);\n    if (matches) {\n      console.log(\"matched\");\n      const row = parseInt(matches[1], 10);\n      const col = parseInt(matches[2], 10);\n      const index = (row - 1) * 3 + (col - 1);\n      if (index >= 0 && index < 9) {\n        handleCellClick(index);\n      }\n    }\n  };\n  const renderCell = index => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"cell\",\n      onClick: () => handleCellClick(index),\n      onMouseEnter: () => !isSpeaking && readCellInfo(index),\n      disabled: !!winner,\n      children: board[index]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: Array.from({\n        length: 9\n      }, (_, index) => renderCell(index))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"winner\",\n      children: [\"Winner: \", winner]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetGame,\n      children: \"Start New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s(TicTacToeBoard, \"pT1uAnxVN3oB2Z4dCWdaP1VUxdk=\", false, function () {\n  return [useParams];\n});\n_c = TicTacToeBoard;\nexport default TicTacToeBoard;\nvar _c;\n$RefreshReg$(_c, \"TicTacToeBoard\");","map":{"version":3,"names":["React","useState","useEffect","useParams","api","io","socket","jsxDEV","_jsxDEV","TicTacToeBoard","_s","sessionId","board","setBoard","Array","fill","currentPlayer","setCurrentPlayer","winner","setWinner","isSpeaking","setIsSpeaking","resetGame","emit","getGameState","then","response","console","log","currentState","catch","error","on","playerType","updatedSessionState","SpeechRecognition","window","webkitSpeechRecognition","recognition","continuous","lang","onstart","onerror","event","onend","onresult","transcript","results","length","trim","handleVoiceCommand","start","stop","disconnect","handleCellClick","index","readCellInfo","row","Math","floor","col","value","msg","SpeechSynthesisUtterance","text","speechSynthesis","speak","matches","match","parseInt","renderCell","className","onClick","onMouseEnter","disabled","children","fileName","_jsxFileName","lineNumber","columnNumber","from","_","_c","$RefreshReg$"],"sources":["/Users/chiaangyong/Desktop/Project/aet-swe-chiaangyong/src/components/TicTacToeBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './TicTacToeBoard.css';\nimport api from '../services/api';\nimport io from 'socket.io-client';\nimport socket from './socket'; \n\nconst TicTacToeBoard = () => {\n  const { sessionId } = useParams();\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [currentPlayer, setCurrentPlayer] = useState('X');\n  const [winner, setWinner] = useState(null);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n\n  const resetGame = () => {\n    socket.emit('reset game', sessionId);\n  };\n\n\n  useEffect(() => {\n\n\n\n    // Fetch initial game state from the API\n    api.getGameState(sessionId)\n      .then(response => {\n        console.log('Game state from backend:', response);\n        console.log(\"set currentState \", response.currentState)\n        setBoard(response.currentState  );\n        setCurrentPlayer(response.currentPlayer);\n        setWinner(response.winner);\n      })\n      .catch(error => {\n        console.error('Error fetching game state:', error);\n      });\n\n\n      \n    // Establish WebSocket connection\n    \n\n    // Join the session\n    socket.emit('join session', sessionId);\n    socket.on('player type', (playerType) => {\n      console.log(`You are player ${playerType}`);\n      // Set state or react accordingly\n    });\n    // Handle game updates\n    socket.on('game update', (updatedSessionState) => {\n      setBoard(updatedSessionState.currentState);\n      setCurrentPlayer(updatedSessionState.currentPlayer);\n      setWinner(updatedSessionState.winner);\n    });\n\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.continuous = true; // Keep listening even after a command is recognized\n    recognition.lang = 'en-US';\n\n    recognition.onstart = () => {\n      console.log('Speech recognition started');\n    };\n\n    recognition.onerror = (event) => {\n      console.error('Speech recognition error', event.error);\n\n    };\n    \n    recognition.onend = () => {\n      \n      console.log('Speech recognition ended');\n    };\n\n    recognition.onresult = (event) => {\n      const transcript = event.results[event.results.length - 1][0].transcript.trim();\n      console.log(transcript);\n      handleVoiceCommand(transcript);\n    };\n\n    recognition.start();\n\n\n    return () => {\n      recognition.stop();\n      socket.disconnect();\n    };\n\n  }, [sessionId]); // Dependency array ensures this effect runs only when sessionId changes\n\n\n  \n  const handleCellClick = async (index) => {\n    if (board && !board[index] && !winner) {\n      // Emit 'make move' event to the server\n      console.log(\"emitting make move\");\n      socket.emit('make move', sessionId, index);\n    }\n  };\n\n  const readCellInfo = (index) => {\n\n    setIsSpeaking(true);\n\n    const row = Math.floor(index / 3) + 1; // Calculate row\n    const col = (index % 3) + 1;           // Calculate column\n    const value = board[index] ? board[index] : 'empty';\n\n    console.log(`Row: ${row}, Column: ${col}, Value: ${value}`);\n\n\n    const msg = new SpeechSynthesisUtterance();\n    msg.text = `Row: ${row}, Column: ${col}, Value: ${value}`;\n    msg.onend = () => {\n      setIsSpeaking(false);\n  };\n    window.speechSynthesis.speak(msg);\n\n};\n\n\nconst handleVoiceCommand = (transcript) => {\n  // Parse the transcript to extract row and column\n  const matches = transcript.match(/row (\\d) column (\\d)/i);\n  if (matches) {\n    console.log(\"matched\")\n\n    const row = parseInt(matches[1], 10);\n    const col = parseInt(matches[2], 10);\n    const index = (row - 1) * 3 + (col - 1);\n    if (index >= 0 && index < 9) {\n      handleCellClick(index);\n    }\n  }\n};\n\n  const renderCell = (index) => {\n    return (\n        <button \n            className=\"cell\" \n            onClick={() => handleCellClick(index)} \n            onMouseEnter={() => !isSpeaking && readCellInfo(index)}\n            disabled={!!winner}>\n            {board[index]}\n        </button>\n    );\n  };\n\n  return (\n    <div>\n      <div className=\"board\">\n        {Array.from({ length: 9 }, (_, index) => renderCell(index))}\n      </div>\n      {winner && <div className=\"winner\">Winner: {winner}</div>}\n\n      <button onClick={resetGame}>Start New Game</button>\n\n    </div>\n  );\n};\nexport default TicTacToeBoard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}