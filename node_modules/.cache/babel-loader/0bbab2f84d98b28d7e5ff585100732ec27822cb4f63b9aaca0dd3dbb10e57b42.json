{"ast":null,"code":"var _jsxFileName = \"/Users/chiaangyong/Desktop/Project/aet-swe-chiaangyong/src/components/TicTacToeBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './TicTacToeBoard.css';\nimport api from '../services/api';\nimport io from 'socket.io-client';\nimport socket from './socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TicTacToeBoard = () => {\n  _s();\n  const {\n    sessionId\n  } = useParams();\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [currentPlayer, setCurrentPlayer] = useState('X');\n  const [winner, setWinner] = useState(null);\n  useEffect(() => {\n    // Fetch initial game state from the API\n    api.getGameState(sessionId).then(response => {\n      console.log('Game state from backend:', response);\n      console.log(\"set currentState \", response.currentState);\n      setBoard(response.currentState);\n      setCurrentPlayer(response.currentPlayer);\n      setWinner(response.winner);\n    }).catch(error => {\n      console.error('Error fetching game state:', error);\n    });\n\n    // Establish WebSocket connection\n\n    // Join the session\n    socket.emit('join session', sessionId);\n    socket.on('player type', playerType => {\n      console.log(`You are player ${playerType}`);\n      // Set state or react accordingly\n    });\n    // Handle game updates\n    socket.on('game update', updatedSessionState => {\n      setBoard(updatedSessionState.currentState);\n      setCurrentPlayer(updatedSessionState.currentPlayer);\n      setWinner(updatedSessionState.winner);\n    });\n\n    // Clean up the socket connection when the component unmounts\n    return () => {\n      socket.disconnect();\n    };\n  }, [sessionId]); // Dependency array ensures this effect runs only when sessionId changes\n\n  const handleCellClick = async index => {\n    if (board && !board[index] && !winner) {\n      // Emit 'make move' event to the server\n      console.log(\"emitting make move\");\n      socket.emit('make move', sessionId, index);\n    }\n  };\n  const renderCell = index => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"cell\",\n      onClick: () => handleCellClick(index),\n      disabled: !!winner || board[index],\n      children: board[index]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: Array.from({\n        length: 9\n      }, (_, index) => renderCell(index))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"winner\",\n      children: [\"Winner: \", winner]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(TicTacToeBoard, \"OfIQKidW51eImOOwj4zbYfI2Lho=\", false, function () {\n  return [useParams];\n});\n_c = TicTacToeBoard;\nexport default TicTacToeBoard;\nvar _c;\n$RefreshReg$(_c, \"TicTacToeBoard\");","map":{"version":3,"names":["React","useState","useEffect","useParams","api","io","socket","jsxDEV","_jsxDEV","TicTacToeBoard","_s","sessionId","board","setBoard","Array","fill","currentPlayer","setCurrentPlayer","winner","setWinner","getGameState","then","response","console","log","currentState","catch","error","emit","on","playerType","updatedSessionState","disconnect","handleCellClick","index","renderCell","className","onClick","disabled","children","fileName","_jsxFileName","lineNumber","columnNumber","from","length","_","_c","$RefreshReg$"],"sources":["/Users/chiaangyong/Desktop/Project/aet-swe-chiaangyong/src/components/TicTacToeBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './TicTacToeBoard.css';\nimport api from '../services/api';\nimport io from 'socket.io-client';\nimport socket from './socket'; \n\nconst TicTacToeBoard = () => {\n  const { sessionId } = useParams();\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [currentPlayer, setCurrentPlayer] = useState('X');\n  const [winner, setWinner] = useState(null);\n\n  useEffect(() => {\n    // Fetch initial game state from the API\n    api.getGameState(sessionId)\n      .then(response => {\n        console.log('Game state from backend:', response);\n        console.log(\"set currentState \", response.currentState)\n        setBoard(response.currentState  );\n        setCurrentPlayer(response.currentPlayer);\n        setWinner(response.winner);\n      })\n      .catch(error => {\n        console.error('Error fetching game state:', error);\n      });\n\n    // Establish WebSocket connection\n    \n\n    // Join the session\n    socket.emit('join session', sessionId);\n    socket.on('player type', (playerType) => {\n      console.log(`You are player ${playerType}`);\n      // Set state or react accordingly\n    });\n    // Handle game updates\n    socket.on('game update', (updatedSessionState) => {\n      setBoard(updatedSessionState.currentState);\n      setCurrentPlayer(updatedSessionState.currentPlayer);\n      setWinner(updatedSessionState.winner);\n    });\n\n    // Clean up the socket connection when the component unmounts\n    return () => {\n      socket.disconnect();\n    };\n  }, [sessionId]); // Dependency array ensures this effect runs only when sessionId changes\n\n  const handleCellClick = async (index) => {\n    if (board && !board[index] && !winner) {\n      // Emit 'make move' event to the server\n      console.log(\"emitting make move\");\n      socket.emit('make move', sessionId, index);\n    }\n  };\n\n  const renderCell = (index) => {\n    return (\n      <button className=\"cell\" onClick={() => handleCellClick(index)} disabled={!!winner || board[index]}>\n        {board[index]}\n      </button>\n    );\n  };\n\n  return (\n    <div>\n      <div className=\"board\">\n        {Array.from({ length: 9 }, (_, index) => renderCell(index))}\n      </div>\n      {winner && <div className=\"winner\">Winner: {winner}</div>}\n    </div>\n  );\n};\nexport default TicTacToeBoard;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAO,sBAAsB;AAC7B,OAAOC,GAAG,MAAM,iBAAiB;AACjC,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM;IAAEC;EAAU,CAAC,GAAGR,SAAS,CAAC,CAAC;EACjC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAACa,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EACvD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGhB,QAAQ,CAAC,GAAG,CAAC;EACvD,MAAM,CAACiB,MAAM,EAAEC,SAAS,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd;IACAE,GAAG,CAACgB,YAAY,CAACT,SAAS,CAAC,CACxBU,IAAI,CAACC,QAAQ,IAAI;MAChBC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,QAAQ,CAAC;MACjDC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,QAAQ,CAACG,YAAY,CAAC;MACvDZ,QAAQ,CAACS,QAAQ,CAACG,YAAc,CAAC;MACjCR,gBAAgB,CAACK,QAAQ,CAACN,aAAa,CAAC;MACxCG,SAAS,CAACG,QAAQ,CAACJ,MAAM,CAAC;IAC5B,CAAC,CAAC,CACDQ,KAAK,CAACC,KAAK,IAAI;MACdJ,OAAO,CAACI,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD,CAAC,CAAC;;IAEJ;;IAGA;IACArB,MAAM,CAACsB,IAAI,CAAC,cAAc,EAAEjB,SAAS,CAAC;IACtCL,MAAM,CAACuB,EAAE,CAAC,aAAa,EAAGC,UAAU,IAAK;MACvCP,OAAO,CAACC,GAAG,CAAE,kBAAiBM,UAAW,EAAC,CAAC;MAC3C;IACF,CAAC,CAAC;IACF;IACAxB,MAAM,CAACuB,EAAE,CAAC,aAAa,EAAGE,mBAAmB,IAAK;MAChDlB,QAAQ,CAACkB,mBAAmB,CAACN,YAAY,CAAC;MAC1CR,gBAAgB,CAACc,mBAAmB,CAACf,aAAa,CAAC;MACnDG,SAAS,CAACY,mBAAmB,CAACb,MAAM,CAAC;IACvC,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXZ,MAAM,CAAC0B,UAAU,CAAC,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,CAACrB,SAAS,CAAC,CAAC,CAAC,CAAC;;EAEjB,MAAMsB,eAAe,GAAG,MAAOC,KAAK,IAAK;IACvC,IAAItB,KAAK,IAAI,CAACA,KAAK,CAACsB,KAAK,CAAC,IAAI,CAAChB,MAAM,EAAE;MACrC;MACAK,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MACjClB,MAAM,CAACsB,IAAI,CAAC,WAAW,EAAEjB,SAAS,EAAEuB,KAAK,CAAC;IAC5C;EACF,CAAC;EAED,MAAMC,UAAU,GAAID,KAAK,IAAK;IAC5B,oBACE1B,OAAA;MAAQ4B,SAAS,EAAC,MAAM;MAACC,OAAO,EAAEA,CAAA,KAAMJ,eAAe,CAACC,KAAK,CAAE;MAACI,QAAQ,EAAE,CAAC,CAACpB,MAAM,IAAIN,KAAK,CAACsB,KAAK,CAAE;MAAAK,QAAA,EAChG3B,KAAK,CAACsB,KAAK;IAAC;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC;EAEb,CAAC;EAED,oBACEnC,OAAA;IAAA+B,QAAA,gBACE/B,OAAA;MAAK4B,SAAS,EAAC,OAAO;MAAAG,QAAA,EACnBzB,KAAK,CAAC8B,IAAI,CAAC;QAAEC,MAAM,EAAE;MAAE,CAAC,EAAE,CAACC,CAAC,EAAEZ,KAAK,KAAKC,UAAU,CAACD,KAAK,CAAC;IAAC;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxD,CAAC,EACLzB,MAAM,iBAAIV,OAAA;MAAK4B,SAAS,EAAC,QAAQ;MAAAG,QAAA,GAAC,UAAQ,EAACrB,MAAM;IAAA;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtD,CAAC;AAEV,CAAC;AAACjC,EAAA,CAlEID,cAAc;EAAA,QACIN,SAAS;AAAA;AAAA4C,EAAA,GAD3BtC,cAAc;AAmEpB,eAAeA,cAAc;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}