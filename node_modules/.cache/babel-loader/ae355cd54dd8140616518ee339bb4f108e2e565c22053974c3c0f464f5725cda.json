{"ast":null,"code":"var _jsxFileName = \"/Users/chiaangyong/Desktop/Project/aet-swe-chiaangyong/src/components/GameList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport socket from './socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameList = ({\n  onSelectSession,\n  userName\n}) => {\n  _s();\n  const [playerCounts, setPlayerCounts] = useState({}); // State to track player counts\n  const [sessions, setSessions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    socket.on('player count update', data => {\n      console.log(\"Received player count update\");\n      setPlayerCounts(prevCounts => ({\n        ...prevCounts,\n        [data.sessionId]: data.playerCount\n      }));\n    });\n    fetchSessions();\n    return () => {\n      socket.off('player count update');\n    };\n  }, []);\n  const fetchSessions = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('/api/sessions');\n      // Make sure the response is an array\n      if (Array.isArray(response.data)) {\n        setSessions(response.data);\n      } else {\n        throw new Error('Data is not an array');\n      }\n    } catch (err) {\n      setError('Failed to fetch sessions: ' + err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleCreateSession = async () => {\n    try {\n      setLoading(true); // Set loading before the API call\n      const response = await axios.post('/api/sessions', {\n        playerName: userName\n      });\n      const newSession = response.data;\n      setSessions(prevSessions => [...prevSessions, newSession]); // Add the new session to the state\n    } catch (err) {\n      setError('Failed to create a new session: ' + err.message);\n    } finally {\n      setLoading(false); // Reset loading state\n    }\n  };\n  const handleSelectSession = sessionId => {\n    onSelectSession(sessionId); // Update the App state with the selected session\n    navigate(`/session/${sessionId}/waiting`); // Navigate to the waiting room for the selected session\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Available Game Sessions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreateSession,\n      children: \"Create Game Session\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: sessions.map(session =>\n      // Check if session is defined and has _id property before rendering\n      session && session._id ? /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSelectSession(session._id),\n          children: [\"Game Session \", session._id, \" - Players: \", playerCounts[session._id] || 0, \"/2\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 29\n        }, this)\n      }, session._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 25\n      }, this) : null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(GameList, \"Cs6s2S8QmF7hSvsipZ969psELfk=\", false, function () {\n  return [useNavigate];\n});\n_c = GameList;\nexport default GameList;\nvar _c;\n$RefreshReg$(_c, \"GameList\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","socket","jsxDEV","_jsxDEV","GameList","onSelectSession","userName","_s","playerCounts","setPlayerCounts","sessions","setSessions","loading","setLoading","error","setError","navigate","on","data","console","log","prevCounts","sessionId","playerCount","fetchSessions","off","response","get","Array","isArray","Error","err","message","handleCreateSession","post","playerName","newSession","prevSessions","handleSelectSession","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","session","_id","_c","$RefreshReg$"],"sources":["/Users/chiaangyong/Desktop/Project/aet-swe-chiaangyong/src/components/GameList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport socket from './socket'; \n\nconst GameList = ({ onSelectSession, userName }) => {\n    const [playerCounts, setPlayerCounts] = useState({}); // State to track player counts\n    const [sessions, setSessions] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n    const navigate = useNavigate(); \n\n    useEffect(() => {\n\n        socket.on('player count update', (data) => {\n            console.log(\"Received player count update\");\n            setPlayerCounts(prevCounts => ({...prevCounts, [data.sessionId]: data.playerCount}));\n          });\n\n        fetchSessions();\n\n        return () => {\n            socket.off('player count update');\n          };\n    }, []);\n\n    const fetchSessions = async () => {\n        try {\n            setLoading(true);\n            const response = await axios.get('/api/sessions');\n            // Make sure the response is an array\n            if (Array.isArray(response.data)) {\n                setSessions(response.data);\n            } else {\n                throw new Error('Data is not an array');\n            }\n        } catch (err) {\n            setError('Failed to fetch sessions: ' + err.message);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleCreateSession = async () => {\n        try {\n            setLoading(true); // Set loading before the API call\n            const response = await axios.post('/api/sessions', { playerName: userName });\n            const newSession = response.data;\n            setSessions(prevSessions => [...prevSessions, newSession]); // Add the new session to the state\n        } catch (err) {\n            setError('Failed to create a new session: ' + err.message);\n        } finally {\n            setLoading(false); // Reset loading state\n        }\n    };\n\n    const handleSelectSession = (sessionId) => {\n        onSelectSession(sessionId); // Update the App state with the selected session\n        navigate(`/session/${sessionId}/waiting`); // Navigate to the waiting room for the selected session\n    };\n\n    return (\n        <div>\n            <h2>Available Game Sessions</h2>\n            <button onClick={handleCreateSession}>Create Game Session</button>\n            {loading && <p>Loading...</p>}\n            {error && <p>Error: {error}</p>}\n            <ul>\n                {sessions.map((session) => (\n                    // Check if session is defined and has _id property before rendering\n                    session && session._id ? (\n                        <li key={session._id}>\n                            <button onClick={() => handleSelectSession(session._id)}>\n                            Game Session {session._id} - Players: {playerCounts[session._id] || 0}/2\n                            </button>\n                        </li>\n                    ) : null\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default GameList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}