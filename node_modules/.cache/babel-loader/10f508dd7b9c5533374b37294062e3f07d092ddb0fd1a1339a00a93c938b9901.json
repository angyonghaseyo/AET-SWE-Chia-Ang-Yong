{"ast":null,"code":"var _jsxFileName = \"/Users/chiaangyong/Desktop/Project/aet-swe-chiaangyong/src/components/WaitingRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { useNavigate } from 'react-router-dom';\nimport socket from './socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WaitingRoom = ({\n  sessionId,\n  playerName\n}) => {\n  _s();\n  const [session, setSession] = useState(null);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    const joinSession = () => {\n      socket.emit('join session', sessionId);\n    };\n    const handleSessionUpdate = updatedSessionState => {\n      setSession(updatedSessionState);\n      if (updatedSessionState.status === 'in_progress') {\n        navigate(`/game/${sessionId}`);\n      }\n    };\n    const handleError = errorMessage => {\n      setError(errorMessage);\n    };\n\n    // Attach event listeners\n    socket.on('session update', handleSessionUpdate);\n    socket.on('error', handleError);\n\n    // Join the session\n    joinSession();\n\n    // Clean up listeners when the component unmounts\n    return () => {\n      socket.off('session update', handleSessionUpdate);\n      socket.off('error', handleError);\n    };\n  }, [sessionId, navigate]);\n\n  // Display error if any\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Display the joining message until the session info is loaded\n  if (!session) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Joining session as \", playerName, \"...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Display a message while waiting for another player to join\n  if (session.status === 'waiting') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Waiting for another player to join, \", playerName, \"...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Display a message when the game is starting\n  if (session.status === 'in_progress') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Game is starting...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If the above conditions are not met, it's safe to assume we're still waiting for updates\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Waiting for session updates...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(WaitingRoom, \"NoZ+MAyJxSas6LI7K++8/nTgFuw=\", false, function () {\n  return [useNavigate];\n});\n_c = WaitingRoom;\nexport default WaitingRoom;\nvar _c;\n$RefreshReg$(_c, \"WaitingRoom\");","map":{"version":3,"names":["React","useState","useEffect","io","useNavigate","socket","jsxDEV","_jsxDEV","WaitingRoom","sessionId","playerName","_s","session","setSession","error","setError","navigate","joinSession","emit","handleSessionUpdate","updatedSessionState","status","handleError","errorMessage","on","off","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/chiaangyong/Desktop/Project/aet-swe-chiaangyong/src/components/WaitingRoom.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { useNavigate } from 'react-router-dom';\nimport socket from './socket'; \n\n\nconst WaitingRoom = ({ sessionId, playerName }) => {\n  const [session, setSession] = useState(null);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    const joinSession = () => {\n      socket.emit('join session', sessionId);\n    };\n\n    const handleSessionUpdate = (updatedSessionState) => {\n      setSession(updatedSessionState);\n      if (updatedSessionState.status === 'in_progress') {\n        navigate(`/game/${sessionId}`);\n      }\n    };\n\n    const handleError = (errorMessage) => {\n      setError(errorMessage);\n    };\n\n    // Attach event listeners\n    socket.on('session update', handleSessionUpdate);\n    socket.on('error', handleError);\n\n    // Join the session\n    joinSession();\n\n    // Clean up listeners when the component unmounts\n    return () => {\n      socket.off('session update', handleSessionUpdate);\n      socket.off('error', handleError);\n    };\n  }, [sessionId, navigate]);\n\n  // Display error if any\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  // Display the joining message until the session info is loaded\n  if (!session) {\n    return <div>Joining session as {playerName}...</div>;\n  }\n\n  // Display a message while waiting for another player to join\n  if (session.status === 'waiting') {\n    return <div>Waiting for another player to join, {playerName}...</div>;\n  }\n\n  // Display a message when the game is starting\n  if (session.status === 'in_progress') {\n    return <div>Game is starting...</div>;\n  }\n\n  // If the above conditions are not met, it's safe to assume we're still waiting for updates\n  return (\n    <div>\n      Waiting for session updates...\n    </div>\n  );\n};\n\nexport default WaitingRoom;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,EAAE,MAAM,kBAAkB;AACjC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG9B,MAAMC,WAAW,GAAGA,CAAC;EAAEC,SAAS;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMe,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9BF,SAAS,CAAC,MAAM;IACd,MAAMe,WAAW,GAAGA,CAAA,KAAM;MACxBZ,MAAM,CAACa,IAAI,CAAC,cAAc,EAAET,SAAS,CAAC;IACxC,CAAC;IAED,MAAMU,mBAAmB,GAAIC,mBAAmB,IAAK;MACnDP,UAAU,CAACO,mBAAmB,CAAC;MAC/B,IAAIA,mBAAmB,CAACC,MAAM,KAAK,aAAa,EAAE;QAChDL,QAAQ,CAAE,SAAQP,SAAU,EAAC,CAAC;MAChC;IACF,CAAC;IAED,MAAMa,WAAW,GAAIC,YAAY,IAAK;MACpCR,QAAQ,CAACQ,YAAY,CAAC;IACxB,CAAC;;IAED;IACAlB,MAAM,CAACmB,EAAE,CAAC,gBAAgB,EAAEL,mBAAmB,CAAC;IAChDd,MAAM,CAACmB,EAAE,CAAC,OAAO,EAAEF,WAAW,CAAC;;IAE/B;IACAL,WAAW,CAAC,CAAC;;IAEb;IACA,OAAO,MAAM;MACXZ,MAAM,CAACoB,GAAG,CAAC,gBAAgB,EAAEN,mBAAmB,CAAC;MACjDd,MAAM,CAACoB,GAAG,CAAC,OAAO,EAAEH,WAAW,CAAC;IAClC,CAAC;EACH,CAAC,EAAE,CAACb,SAAS,EAAEO,QAAQ,CAAC,CAAC;;EAEzB;EACA,IAAIF,KAAK,EAAE;IACT,oBAAOP,OAAA;MAAAmB,QAAA,GAAK,SAAO,EAACZ,KAAK;IAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAClC;;EAEA;EACA,IAAI,CAAClB,OAAO,EAAE;IACZ,oBAAOL,OAAA;MAAAmB,QAAA,GAAK,qBAAmB,EAAChB,UAAU,EAAC,KAAG;IAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACtD;;EAEA;EACA,IAAIlB,OAAO,CAACS,MAAM,KAAK,SAAS,EAAE;IAChC,oBAAOd,OAAA;MAAAmB,QAAA,GAAK,sCAAoC,EAAChB,UAAU,EAAC,KAAG;IAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACvE;;EAEA;EACA,IAAIlB,OAAO,CAACS,MAAM,KAAK,aAAa,EAAE;IACpC,oBAAOd,OAAA;MAAAmB,QAAA,EAAK;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACvC;;EAEA;EACA,oBACEvB,OAAA;IAAAmB,QAAA,EAAK;EAEL;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAEV,CAAC;AAACnB,EAAA,CA5DIH,WAAW;EAAA,QAGEJ,WAAW;AAAA;AAAA2B,EAAA,GAHxBvB,WAAW;AA8DjB,eAAeA,WAAW;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}