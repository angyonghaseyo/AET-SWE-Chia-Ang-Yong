{"ast":null,"code":"import React,{useState,useEffect}from'react';import axios from'axios';import{useNavigate}from'react-router-dom';import socket from'./socket';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const GameList=_ref=>{let{onSelectSession,userName}=_ref;const[playerCounts,setPlayerCounts]=useState({});// State to track player counts\nconst[sessions,setSessions]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState('');const navigate=useNavigate();useEffect(()=>{// Listen for player count updates\nsocket.on('player count update',data=>{setPlayerCounts(prevCounts=>({...prevCounts,[data.sessionId]:data.playerCount}));});fetchSessions();},[]);const fetchSessions=async()=>{try{setLoading(true);const response=await axios.get('/api/sessions');setSessions(response.data);// Initialize player counts from fetched data\nconst initialCounts=response.data.reduce((counts,session)=>{counts[session._id]=session.playerCount;return counts;},{});setPlayerCounts(initialCounts);}catch(err){setError('Failed to fetch sessions: '+err.message);}finally{setLoading(false);}};const handleCreateSession=async()=>{try{setLoading(true);// Set loading before the API call\nconst response=await axios.post('/api/sessions',{playerName:userName});const newSession=response.data;setSessions(prevSessions=>[...prevSessions,newSession]);// Add the new session to the state\n}catch(err){setError('Failed to create a new session: '+err.message);}finally{setLoading(false);// Reset loading state\n}};const handleSelectSession=sessionId=>{onSelectSession(sessionId);// Update the App state with the selected session\nnavigate(\"/session/\".concat(sessionId,\"/waiting\"));// Navigate to the waiting room for the selected session\n};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Available Game Sessions\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleCreateSession,children:\"Create Game Session\"}),loading&&/*#__PURE__*/_jsx(\"p\",{children:\"Loading...\"}),error&&/*#__PURE__*/_jsxs(\"p\",{children:[\"Error: \",error]}),/*#__PURE__*/_jsx(\"ul\",{children:sessions.map(session=>// Check if session is defined and has _id property before rendering\nsession&&session._id?/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsxs(\"button\",{onClick:()=>handleSelectSession(session._id),children:[\"Game Session \",session._id,\" - Players: \",playerCounts[session._id]||0,\"/2\"]})},session._id):null)})]});};export default GameList;","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","socket","jsx","_jsx","jsxs","_jsxs","GameList","_ref","onSelectSession","userName","playerCounts","setPlayerCounts","sessions","setSessions","loading","setLoading","error","setError","navigate","on","data","prevCounts","sessionId","playerCount","fetchSessions","response","get","initialCounts","reduce","counts","session","_id","err","message","handleCreateSession","post","playerName","newSession","prevSessions","handleSelectSession","concat","children","onClick","map"],"sources":["/Users/chiaangyong/Desktop/Project/aet-swe-chiaangyong/src/components/GameList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport socket from './socket'; \n\nconst GameList = ({ onSelectSession, userName }) => {\n    const [playerCounts, setPlayerCounts] = useState({}); // State to track player counts\n    const [sessions, setSessions] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n    const navigate = useNavigate(); \n\n    useEffect(() => {\n\n        // Listen for player count updates\n        socket.on('player count update', (data) => {\n            setPlayerCounts(prevCounts => ({\n                ...prevCounts,\n                [data.sessionId]: data.playerCount\n            }));\n        });\n\n        fetchSessions();\n\n    }, []);\n\n    const fetchSessions = async () => {\n        try {\n            setLoading(true);\n            const response = await axios.get('/api/sessions');\n            setSessions(response.data);\n\n            // Initialize player counts from fetched data\n            const initialCounts = response.data.reduce((counts, session) => {\n                counts[session._id] = session.playerCount;\n                return counts;\n            }, {});\n            setPlayerCounts(initialCounts);\n        } catch (err) {\n            setError('Failed to fetch sessions: ' + err.message);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleCreateSession = async () => {\n        try {\n            setLoading(true); // Set loading before the API call\n            const response = await axios.post('/api/sessions', { playerName: userName });\n            const newSession = response.data;\n            setSessions(prevSessions => [...prevSessions, newSession]); // Add the new session to the state\n        } catch (err) {\n            setError('Failed to create a new session: ' + err.message);\n        } finally {\n            setLoading(false); // Reset loading state\n        }\n    };\n\n    const handleSelectSession = (sessionId) => {\n        onSelectSession(sessionId); // Update the App state with the selected session\n        navigate(`/session/${sessionId}/waiting`); // Navigate to the waiting room for the selected session\n    };\n\n    return (\n        <div>\n            <h2>Available Game Sessions</h2>\n            <button onClick={handleCreateSession}>Create Game Session</button>\n            {loading && <p>Loading...</p>}\n            {error && <p>Error: {error}</p>}\n            <ul>\n                {sessions.map((session) => (\n                    // Check if session is defined and has _id property before rendering\n                    session && session._id ? (\n                        <li key={session._id}>\n                            <button onClick={() => handleSelectSession(session._id)}>\n                            Game Session {session._id} - Players: {playerCounts[session._id] || 0}/2\n                            </button>\n                        </li>\n                    ) : null\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default GameList;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}